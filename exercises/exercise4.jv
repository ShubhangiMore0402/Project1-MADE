pipeline TemperaturePipeline {
    TemperatureZipExtractor 
        -> TemperatureZipArchiveInterpreter
        -> TemperatureFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter
        -> TemperatureColDataSelector
        -> TemperatureHeaderSequenceWriter
        -> TemperatureTableInterpreter
        -> CelsiusToFahrenheitTemperature
        -> CelsiusToFahrenheitBatterietemperature
        -> TemperatureSQLloader;

    block TemperatureZipExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block TemperatureZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureTextFileInterpreter oftype TextFileInterpreter {

    }

    block TemperatureCSVInterpreter oftype CSVInterpreter   {
    delimiter: ";";
    }

    block TemperatureHeaderSequenceWriter oftype CellWriter {
         at: range A1:F1;
         write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block TemperatureColDataSelector oftype CellRangeSelector   {
        select: range A1:J*;
    }

    block TemperatureTableInterpreter oftype TableInterpreter    {
        header: true;
        columns: [
            "id" oftype id,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
    
        ];
    }

    block CelsiusToFahrenheitTemperature oftype TableTransformer {
    inputColumns: ['temperature'];
    outputColumn: 'temperature';
    use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatterietemperature oftype TableTransformer {
    inputColumns: ['battery_temperature'];
    outputColumn: 'battery_temperature';
    use: CelsiusToFahrenheit;
    }

    block TemperatureSQLloader oftype SQLiteLoader{
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }
}

valuetype Month oftype integer  {
    constraints: [
        MonthRange,
    ];
}

constraint MonthRange oftype RangeConstraint {
    lowerBound: 1;
    upperBound: 12;
}

valuetype id oftype integer {
    constraints: 
    [
        GreaterthanZero,
    ];
}

constraint GreaterthanZero on integer:
    value > 0 ;  

transform CelsiusToFahrenheit   {
    from Celsius oftype decimal;
    to Fahrenheit oftype decimal;
    Fahrenheit: (Celsius * 9/5) + 32;
}
